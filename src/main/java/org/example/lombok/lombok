어노테이션으로 lombok만 쓰면 좋겠지만 실무에서는 사용하는 것만 사용하기 때문에 정리를 한번 해보자

@lombok -> *util 과 같다고 생각하면 편함
ex) @Data -> 여러 어노테이션을 통합하는데 여기서 우리가 사용할 것만 어노테이션으로 쓰자는게 목표


/** 생성자 관련 */

@NoArgsConstructor : 매개 변수가 없는 기본 생성자를 생성
    - force : final 필드가 존재할 때 이를 null 또는 0으로 초기화하여 기본 생성자를 만들 수 있게함.
    - access : 생성되는 메소드의 접근제어자 설정 (Access Level)
    - onConstructor_ = {@어노테이션,...} : 생성된 생성자에 어노테이션 추가
    -staticName : 해당 생성자를 사용하는 static 생성자를 추가

@RequiredArgsConstructor : final 필드만 포함된 생성자를 생성
    - access : 생성되는 메소드의 접근제어자 설정 (AccessLevel)
    - onConstructor_ = {@어노테이션,...} : 생성된 생성자에 어노테이션 추가
    - staticName : 해당 생성자를 사용하는 static 생성자를 추가

@AllArgsConstructor : 모든 필드를 포함한 생성자를 생성
    - access : 생성되는 메소드의 접근제어자 설정 (AccessLevel)
    - onConstructor_ = {@어노테이션,...} : 생성된 생성자에 어노테이션 추가
    - staticName : 해당 생성자를 사용하는 static 생성자를 추가



/** 메소드 관련 */

@Getter : Getter 자동 생성
    - lazy : Getter를 캐시 하며, Getter가 CPU가 많이 필요하거나 메모리가 많이 필요한 표현식의 경우 유용 (private final 변수에만 사용 가능, 롬복에서 잠금 처리하여 Thread-safe일 필요 없다.)
    - onMethod_ = {@어노테이션,...} : 생성되는 메소드에 어노테이션 추가
    - value : 생성되는 메소드의 접근제어자 설정 (AccessLevel)

@Setter : Setter 자동 생성
    - onParam_ = {@어노테이션,...} : Setter의 매개 변수에 어노테이션 추가
    - onMethod_ = {@어노테이션,...} : 생성되는 메소드에 어노테이션 추가
    - value : 생성되는 메소드의 접근제어자 설정 (AccessLevel)

@ToString : toString 메소드 자동 생성
    - includeFieldNames : 이름-값 쌍으로 표현할지 값만 표현할지 여부
    - of : 포함할 필드 설정
    - exclude : 제외할 필드 설정
    - callSuper : 슈퍼 클래스의 toString 메소드 출력을 포함시킬지 여부
    - doNotUseGetters : toString 메소드 구현에 Getter 메소드를 사용하지 않고 this를 사용할지 여부
    - onlyExplicitlyIncluded : 필드에 설정된 @ToString.Include 또는 @ToString.Exclude를 적용시킨다

@EqualsAndHashCode : equals, hashCode 메소드를 자동으로 생성
    - cacheStrategy : hashCode의 호출 결과를 캐시하여 이후 호출에 사용할지 여부
    - of : 포함할 필드 설정
    - exclude : 제외할 필드 설정
    - callSuper : 슈퍼 클래스의 toString 메소드 출력을 포함시킬지 여부
    - doNotUseGetters : toString 메소드 구현에 Getter 메소드를 사용하지 않고 this를 사용할지 여부
    - onlyExplicitlyIncluded : 필드에 설정된 @EqualsAndHashCode.Include 또는 @EqualsAndHashCode.Exclude를 적용시킨다.

@With : with 메소드를 자동으로 생성
        with 메소드는 해당 필드만 인자로 전달한 값으로 변경하여, 모든 필드를 사용한 생성자를 통해 새로운 객체로 반환한다. (해당 객체의 필드와 동일한 값을 설정하면 해당 객체를 반환한다.)

    - onParam_ = {@어노테이션,...} : with 메소드의 매개 변수에 어노테이션 추가
    - onMethod_ = {@어노테이션,...} : with 메소드에 어노테이션 추가
    - value : 생성되는 메소드의 접근제어자 설정 (AccessLevel)

/** 통합 기능 */